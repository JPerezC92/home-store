
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IncomeDB` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IncomeDB
 * 
 */
export type IncomeDBModel = runtime.Types.Result.DefaultSelection<Prisma.$IncomeDBPayload>

export type AggregateIncomeDB = {
  _count: IncomeDBCountAggregateOutputType | null
  _avg: IncomeDBAvgAggregateOutputType | null
  _sum: IncomeDBSumAggregateOutputType | null
  _min: IncomeDBMinAggregateOutputType | null
  _max: IncomeDBMaxAggregateOutputType | null
}

export type IncomeDBAvgAggregateOutputType = {
  amount: number | null
}

export type IncomeDBSumAggregateOutputType = {
  amount: number | null
}

export type IncomeDBMinAggregateOutputType = {
  income_id: string | null
  amount: number | null
  created_at: Date | null
  updated_at: Date | null
  payment_method_id: string | null
}

export type IncomeDBMaxAggregateOutputType = {
  income_id: string | null
  amount: number | null
  created_at: Date | null
  updated_at: Date | null
  payment_method_id: string | null
}

export type IncomeDBCountAggregateOutputType = {
  income_id: number
  amount: number
  created_at: number
  updated_at: number
  payment_method_id: number
  _all: number
}


export type IncomeDBAvgAggregateInputType = {
  amount?: true
}

export type IncomeDBSumAggregateInputType = {
  amount?: true
}

export type IncomeDBMinAggregateInputType = {
  income_id?: true
  amount?: true
  created_at?: true
  updated_at?: true
  payment_method_id?: true
}

export type IncomeDBMaxAggregateInputType = {
  income_id?: true
  amount?: true
  created_at?: true
  updated_at?: true
  payment_method_id?: true
}

export type IncomeDBCountAggregateInputType = {
  income_id?: true
  amount?: true
  created_at?: true
  updated_at?: true
  payment_method_id?: true
  _all?: true
}

export type IncomeDBAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncomeDB to aggregate.
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeDBS to fetch.
   */
  orderBy?: Prisma.IncomeDBOrderByWithRelationInput | Prisma.IncomeDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IncomeDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IncomeDBS
  **/
  _count?: true | IncomeDBCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IncomeDBAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IncomeDBSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IncomeDBMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IncomeDBMaxAggregateInputType
}

export type GetIncomeDBAggregateType<T extends IncomeDBAggregateArgs> = {
      [P in keyof T & keyof AggregateIncomeDB]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIncomeDB[P]>
    : Prisma.GetScalarType<T[P], AggregateIncomeDB[P]>
}




export type IncomeDBGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncomeDBWhereInput
  orderBy?: Prisma.IncomeDBOrderByWithAggregationInput | Prisma.IncomeDBOrderByWithAggregationInput[]
  by: Prisma.IncomeDBScalarFieldEnum[] | Prisma.IncomeDBScalarFieldEnum
  having?: Prisma.IncomeDBScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IncomeDBCountAggregateInputType | true
  _avg?: IncomeDBAvgAggregateInputType
  _sum?: IncomeDBSumAggregateInputType
  _min?: IncomeDBMinAggregateInputType
  _max?: IncomeDBMaxAggregateInputType
}

export type IncomeDBGroupByOutputType = {
  income_id: string
  amount: number
  created_at: Date
  updated_at: Date
  payment_method_id: string
  _count: IncomeDBCountAggregateOutputType | null
  _avg: IncomeDBAvgAggregateOutputType | null
  _sum: IncomeDBSumAggregateOutputType | null
  _min: IncomeDBMinAggregateOutputType | null
  _max: IncomeDBMaxAggregateOutputType | null
}

type GetIncomeDBGroupByPayload<T extends IncomeDBGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IncomeDBGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IncomeDBGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IncomeDBGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IncomeDBGroupByOutputType[P]>
      }
    >
  > 



export type IncomeDBWhereInput = {
  AND?: Prisma.IncomeDBWhereInput | Prisma.IncomeDBWhereInput[]
  OR?: Prisma.IncomeDBWhereInput[]
  NOT?: Prisma.IncomeDBWhereInput | Prisma.IncomeDBWhereInput[]
  income_id?: Prisma.StringFilter<"IncomeDB"> | string
  amount?: Prisma.IntFilter<"IncomeDB"> | number
  created_at?: Prisma.DateTimeFilter<"IncomeDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"IncomeDB"> | Date | string
  payment_method_id?: Prisma.StringFilter<"IncomeDB"> | string
  PaymentMethodDB?: Prisma.XOR<Prisma.PaymentMethodDBScalarRelationFilter, Prisma.PaymentMethodDBWhereInput>
}

export type IncomeDBOrderByWithRelationInput = {
  income_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
  PaymentMethodDB?: Prisma.PaymentMethodDBOrderByWithRelationInput
}

export type IncomeDBWhereUniqueInput = Prisma.AtLeast<{
  income_id?: string
  AND?: Prisma.IncomeDBWhereInput | Prisma.IncomeDBWhereInput[]
  OR?: Prisma.IncomeDBWhereInput[]
  NOT?: Prisma.IncomeDBWhereInput | Prisma.IncomeDBWhereInput[]
  amount?: Prisma.IntFilter<"IncomeDB"> | number
  created_at?: Prisma.DateTimeFilter<"IncomeDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"IncomeDB"> | Date | string
  payment_method_id?: Prisma.StringFilter<"IncomeDB"> | string
  PaymentMethodDB?: Prisma.XOR<Prisma.PaymentMethodDBScalarRelationFilter, Prisma.PaymentMethodDBWhereInput>
}, "income_id">

export type IncomeDBOrderByWithAggregationInput = {
  income_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
  _count?: Prisma.IncomeDBCountOrderByAggregateInput
  _avg?: Prisma.IncomeDBAvgOrderByAggregateInput
  _max?: Prisma.IncomeDBMaxOrderByAggregateInput
  _min?: Prisma.IncomeDBMinOrderByAggregateInput
  _sum?: Prisma.IncomeDBSumOrderByAggregateInput
}

export type IncomeDBScalarWhereWithAggregatesInput = {
  AND?: Prisma.IncomeDBScalarWhereWithAggregatesInput | Prisma.IncomeDBScalarWhereWithAggregatesInput[]
  OR?: Prisma.IncomeDBScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IncomeDBScalarWhereWithAggregatesInput | Prisma.IncomeDBScalarWhereWithAggregatesInput[]
  income_id?: Prisma.StringWithAggregatesFilter<"IncomeDB"> | string
  amount?: Prisma.IntWithAggregatesFilter<"IncomeDB"> | number
  created_at?: Prisma.DateTimeWithAggregatesFilter<"IncomeDB"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"IncomeDB"> | Date | string
  payment_method_id?: Prisma.StringWithAggregatesFilter<"IncomeDB"> | string
}

export type IncomeDBCreateInput = {
  income_id?: string
  amount: number
  created_at?: Date | string
  updated_at?: Date | string
  PaymentMethodDB: Prisma.PaymentMethodDBCreateNestedOneWithoutIncomeDBInput
}

export type IncomeDBUncheckedCreateInput = {
  income_id?: string
  amount: number
  created_at?: Date | string
  updated_at?: Date | string
  payment_method_id: string
}

export type IncomeDBUpdateInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  PaymentMethodDB?: Prisma.PaymentMethodDBUpdateOneRequiredWithoutIncomeDBNestedInput
}

export type IncomeDBUncheckedUpdateInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncomeDBCreateManyInput = {
  income_id?: string
  amount: number
  created_at?: Date | string
  updated_at?: Date | string
  payment_method_id: string
}

export type IncomeDBUpdateManyMutationInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeDBUncheckedUpdateManyInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IncomeDBListRelationFilter = {
  every?: Prisma.IncomeDBWhereInput
  some?: Prisma.IncomeDBWhereInput
  none?: Prisma.IncomeDBWhereInput
}

export type IncomeDBOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IncomeDBCountOrderByAggregateInput = {
  income_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
}

export type IncomeDBAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type IncomeDBMaxOrderByAggregateInput = {
  income_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
}

export type IncomeDBMinOrderByAggregateInput = {
  income_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
}

export type IncomeDBSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type IncomeDBCreateNestedManyWithoutPaymentMethodDBInput = {
  create?: Prisma.XOR<Prisma.IncomeDBCreateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.IncomeDBCreateWithoutPaymentMethodDBInput[] | Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput[]
  createMany?: Prisma.IncomeDBCreateManyPaymentMethodDBInputEnvelope
  connect?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
}

export type IncomeDBUncheckedCreateNestedManyWithoutPaymentMethodDBInput = {
  create?: Prisma.XOR<Prisma.IncomeDBCreateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.IncomeDBCreateWithoutPaymentMethodDBInput[] | Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput[]
  createMany?: Prisma.IncomeDBCreateManyPaymentMethodDBInputEnvelope
  connect?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
}

export type IncomeDBUpdateManyWithoutPaymentMethodDBNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeDBCreateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.IncomeDBCreateWithoutPaymentMethodDBInput[] | Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput[]
  upsert?: Prisma.IncomeDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.IncomeDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput[]
  createMany?: Prisma.IncomeDBCreateManyPaymentMethodDBInputEnvelope
  set?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  disconnect?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  delete?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  connect?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  update?: Prisma.IncomeDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.IncomeDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput[]
  updateMany?: Prisma.IncomeDBUpdateManyWithWhereWithoutPaymentMethodDBInput | Prisma.IncomeDBUpdateManyWithWhereWithoutPaymentMethodDBInput[]
  deleteMany?: Prisma.IncomeDBScalarWhereInput | Prisma.IncomeDBScalarWhereInput[]
}

export type IncomeDBUncheckedUpdateManyWithoutPaymentMethodDBNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeDBCreateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.IncomeDBCreateWithoutPaymentMethodDBInput[] | Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.IncomeDBCreateOrConnectWithoutPaymentMethodDBInput[]
  upsert?: Prisma.IncomeDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.IncomeDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput[]
  createMany?: Prisma.IncomeDBCreateManyPaymentMethodDBInputEnvelope
  set?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  disconnect?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  delete?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  connect?: Prisma.IncomeDBWhereUniqueInput | Prisma.IncomeDBWhereUniqueInput[]
  update?: Prisma.IncomeDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.IncomeDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput[]
  updateMany?: Prisma.IncomeDBUpdateManyWithWhereWithoutPaymentMethodDBInput | Prisma.IncomeDBUpdateManyWithWhereWithoutPaymentMethodDBInput[]
  deleteMany?: Prisma.IncomeDBScalarWhereInput | Prisma.IncomeDBScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IncomeDBCreateWithoutPaymentMethodDBInput = {
  income_id?: string
  amount: number
  created_at?: Date | string
  updated_at?: Date | string
}

export type IncomeDBUncheckedCreateWithoutPaymentMethodDBInput = {
  income_id?: string
  amount: number
  created_at?: Date | string
  updated_at?: Date | string
}

export type IncomeDBCreateOrConnectWithoutPaymentMethodDBInput = {
  where: Prisma.IncomeDBWhereUniqueInput
  create: Prisma.XOR<Prisma.IncomeDBCreateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput>
}

export type IncomeDBCreateManyPaymentMethodDBInputEnvelope = {
  data: Prisma.IncomeDBCreateManyPaymentMethodDBInput | Prisma.IncomeDBCreateManyPaymentMethodDBInput[]
  skipDuplicates?: boolean
}

export type IncomeDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput = {
  where: Prisma.IncomeDBWhereUniqueInput
  update: Prisma.XOR<Prisma.IncomeDBUpdateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedUpdateWithoutPaymentMethodDBInput>
  create: Prisma.XOR<Prisma.IncomeDBCreateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedCreateWithoutPaymentMethodDBInput>
}

export type IncomeDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput = {
  where: Prisma.IncomeDBWhereUniqueInput
  data: Prisma.XOR<Prisma.IncomeDBUpdateWithoutPaymentMethodDBInput, Prisma.IncomeDBUncheckedUpdateWithoutPaymentMethodDBInput>
}

export type IncomeDBUpdateManyWithWhereWithoutPaymentMethodDBInput = {
  where: Prisma.IncomeDBScalarWhereInput
  data: Prisma.XOR<Prisma.IncomeDBUpdateManyMutationInput, Prisma.IncomeDBUncheckedUpdateManyWithoutPaymentMethodDBInput>
}

export type IncomeDBScalarWhereInput = {
  AND?: Prisma.IncomeDBScalarWhereInput | Prisma.IncomeDBScalarWhereInput[]
  OR?: Prisma.IncomeDBScalarWhereInput[]
  NOT?: Prisma.IncomeDBScalarWhereInput | Prisma.IncomeDBScalarWhereInput[]
  income_id?: Prisma.StringFilter<"IncomeDB"> | string
  amount?: Prisma.IntFilter<"IncomeDB"> | number
  created_at?: Prisma.DateTimeFilter<"IncomeDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"IncomeDB"> | Date | string
  payment_method_id?: Prisma.StringFilter<"IncomeDB"> | string
}

export type IncomeDBCreateManyPaymentMethodDBInput = {
  income_id?: string
  amount: number
  created_at?: Date | string
  updated_at?: Date | string
}

export type IncomeDBUpdateWithoutPaymentMethodDBInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeDBUncheckedUpdateWithoutPaymentMethodDBInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeDBUncheckedUpdateManyWithoutPaymentMethodDBInput = {
  income_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type IncomeDBSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  income_id?: boolean
  amount?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incomeDB"]>

export type IncomeDBSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  income_id?: boolean
  amount?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incomeDB"]>

export type IncomeDBSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  income_id?: boolean
  amount?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}, ExtArgs["result"]["incomeDB"]>

export type IncomeDBSelectScalar = {
  income_id?: boolean
  amount?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
}

export type IncomeDBOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"income_id" | "amount" | "created_at" | "updated_at" | "payment_method_id", ExtArgs["result"]["incomeDB"]>
export type IncomeDBInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}
export type IncomeDBIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}
export type IncomeDBIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}

export type $IncomeDBPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IncomeDB"
  objects: {
    PaymentMethodDB: Prisma.$PaymentMethodDBPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    income_id: string
    amount: number
    created_at: Date
    updated_at: Date
    payment_method_id: string
  }, ExtArgs["result"]["incomeDB"]>
  composites: {}
}

export type IncomeDBGetPayload<S extends boolean | null | undefined | IncomeDBDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload, S>

export type IncomeDBCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IncomeDBFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IncomeDBCountAggregateInputType | true
  }

export interface IncomeDBDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IncomeDB'], meta: { name: 'IncomeDB' } }
  /**
   * Find zero or one IncomeDB that matches the filter.
   * @param {IncomeDBFindUniqueArgs} args - Arguments to find a IncomeDB
   * @example
   * // Get one IncomeDB
   * const incomeDB = await prisma.incomeDB.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IncomeDBFindUniqueArgs>(args: Prisma.SelectSubset<T, IncomeDBFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IncomeDB that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IncomeDBFindUniqueOrThrowArgs} args - Arguments to find a IncomeDB
   * @example
   * // Get one IncomeDB
   * const incomeDB = await prisma.incomeDB.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IncomeDBFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IncomeDBFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncomeDB that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBFindFirstArgs} args - Arguments to find a IncomeDB
   * @example
   * // Get one IncomeDB
   * const incomeDB = await prisma.incomeDB.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IncomeDBFindFirstArgs>(args?: Prisma.SelectSubset<T, IncomeDBFindFirstArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncomeDB that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBFindFirstOrThrowArgs} args - Arguments to find a IncomeDB
   * @example
   * // Get one IncomeDB
   * const incomeDB = await prisma.incomeDB.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IncomeDBFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IncomeDBFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IncomeDBS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IncomeDBS
   * const incomeDBS = await prisma.incomeDB.findMany()
   * 
   * // Get first 10 IncomeDBS
   * const incomeDBS = await prisma.incomeDB.findMany({ take: 10 })
   * 
   * // Only select the `income_id`
   * const incomeDBWithIncome_idOnly = await prisma.incomeDB.findMany({ select: { income_id: true } })
   * 
   */
  findMany<T extends IncomeDBFindManyArgs>(args?: Prisma.SelectSubset<T, IncomeDBFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IncomeDB.
   * @param {IncomeDBCreateArgs} args - Arguments to create a IncomeDB.
   * @example
   * // Create one IncomeDB
   * const IncomeDB = await prisma.incomeDB.create({
   *   data: {
   *     // ... data to create a IncomeDB
   *   }
   * })
   * 
   */
  create<T extends IncomeDBCreateArgs>(args: Prisma.SelectSubset<T, IncomeDBCreateArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IncomeDBS.
   * @param {IncomeDBCreateManyArgs} args - Arguments to create many IncomeDBS.
   * @example
   * // Create many IncomeDBS
   * const incomeDB = await prisma.incomeDB.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IncomeDBCreateManyArgs>(args?: Prisma.SelectSubset<T, IncomeDBCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IncomeDBS and returns the data saved in the database.
   * @param {IncomeDBCreateManyAndReturnArgs} args - Arguments to create many IncomeDBS.
   * @example
   * // Create many IncomeDBS
   * const incomeDB = await prisma.incomeDB.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IncomeDBS and only return the `income_id`
   * const incomeDBWithIncome_idOnly = await prisma.incomeDB.createManyAndReturn({
   *   select: { income_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IncomeDBCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IncomeDBCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IncomeDB.
   * @param {IncomeDBDeleteArgs} args - Arguments to delete one IncomeDB.
   * @example
   * // Delete one IncomeDB
   * const IncomeDB = await prisma.incomeDB.delete({
   *   where: {
   *     // ... filter to delete one IncomeDB
   *   }
   * })
   * 
   */
  delete<T extends IncomeDBDeleteArgs>(args: Prisma.SelectSubset<T, IncomeDBDeleteArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IncomeDB.
   * @param {IncomeDBUpdateArgs} args - Arguments to update one IncomeDB.
   * @example
   * // Update one IncomeDB
   * const incomeDB = await prisma.incomeDB.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IncomeDBUpdateArgs>(args: Prisma.SelectSubset<T, IncomeDBUpdateArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IncomeDBS.
   * @param {IncomeDBDeleteManyArgs} args - Arguments to filter IncomeDBS to delete.
   * @example
   * // Delete a few IncomeDBS
   * const { count } = await prisma.incomeDB.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IncomeDBDeleteManyArgs>(args?: Prisma.SelectSubset<T, IncomeDBDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncomeDBS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IncomeDBS
   * const incomeDB = await prisma.incomeDB.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IncomeDBUpdateManyArgs>(args: Prisma.SelectSubset<T, IncomeDBUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncomeDBS and returns the data updated in the database.
   * @param {IncomeDBUpdateManyAndReturnArgs} args - Arguments to update many IncomeDBS.
   * @example
   * // Update many IncomeDBS
   * const incomeDB = await prisma.incomeDB.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IncomeDBS and only return the `income_id`
   * const incomeDBWithIncome_idOnly = await prisma.incomeDB.updateManyAndReturn({
   *   select: { income_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IncomeDBUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IncomeDBUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IncomeDB.
   * @param {IncomeDBUpsertArgs} args - Arguments to update or create a IncomeDB.
   * @example
   * // Update or create a IncomeDB
   * const incomeDB = await prisma.incomeDB.upsert({
   *   create: {
   *     // ... data to create a IncomeDB
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IncomeDB we want to update
   *   }
   * })
   */
  upsert<T extends IncomeDBUpsertArgs>(args: Prisma.SelectSubset<T, IncomeDBUpsertArgs<ExtArgs>>): Prisma.Prisma__IncomeDBClient<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IncomeDBS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBCountArgs} args - Arguments to filter IncomeDBS to count.
   * @example
   * // Count the number of IncomeDBS
   * const count = await prisma.incomeDB.count({
   *   where: {
   *     // ... the filter for the IncomeDBS we want to count
   *   }
   * })
  **/
  count<T extends IncomeDBCountArgs>(
    args?: Prisma.Subset<T, IncomeDBCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IncomeDBCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IncomeDB.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IncomeDBAggregateArgs>(args: Prisma.Subset<T, IncomeDBAggregateArgs>): Prisma.PrismaPromise<GetIncomeDBAggregateType<T>>

  /**
   * Group by IncomeDB.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeDBGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IncomeDBGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IncomeDBGroupByArgs['orderBy'] }
      : { orderBy?: IncomeDBGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IncomeDBGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncomeDBGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IncomeDB model
 */
readonly fields: IncomeDBFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IncomeDB.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IncomeDBClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  PaymentMethodDB<T extends Prisma.PaymentMethodDBDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentMethodDBDefaultArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IncomeDB model
 */
export interface IncomeDBFieldRefs {
  readonly income_id: Prisma.FieldRef<"IncomeDB", 'String'>
  readonly amount: Prisma.FieldRef<"IncomeDB", 'Int'>
  readonly created_at: Prisma.FieldRef<"IncomeDB", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"IncomeDB", 'DateTime'>
  readonly payment_method_id: Prisma.FieldRef<"IncomeDB", 'String'>
}
    

// Custom InputTypes
/**
 * IncomeDB findUnique
 */
export type IncomeDBFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * Filter, which IncomeDB to fetch.
   */
  where: Prisma.IncomeDBWhereUniqueInput
}

/**
 * IncomeDB findUniqueOrThrow
 */
export type IncomeDBFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * Filter, which IncomeDB to fetch.
   */
  where: Prisma.IncomeDBWhereUniqueInput
}

/**
 * IncomeDB findFirst
 */
export type IncomeDBFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * Filter, which IncomeDB to fetch.
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeDBS to fetch.
   */
  orderBy?: Prisma.IncomeDBOrderByWithRelationInput | Prisma.IncomeDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncomeDBS.
   */
  cursor?: Prisma.IncomeDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncomeDBS.
   */
  distinct?: Prisma.IncomeDBScalarFieldEnum | Prisma.IncomeDBScalarFieldEnum[]
}

/**
 * IncomeDB findFirstOrThrow
 */
export type IncomeDBFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * Filter, which IncomeDB to fetch.
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeDBS to fetch.
   */
  orderBy?: Prisma.IncomeDBOrderByWithRelationInput | Prisma.IncomeDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncomeDBS.
   */
  cursor?: Prisma.IncomeDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncomeDBS.
   */
  distinct?: Prisma.IncomeDBScalarFieldEnum | Prisma.IncomeDBScalarFieldEnum[]
}

/**
 * IncomeDB findMany
 */
export type IncomeDBFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * Filter, which IncomeDBS to fetch.
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeDBS to fetch.
   */
  orderBy?: Prisma.IncomeDBOrderByWithRelationInput | Prisma.IncomeDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IncomeDBS.
   */
  cursor?: Prisma.IncomeDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeDBS.
   */
  skip?: number
  distinct?: Prisma.IncomeDBScalarFieldEnum | Prisma.IncomeDBScalarFieldEnum[]
}

/**
 * IncomeDB create
 */
export type IncomeDBCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * The data needed to create a IncomeDB.
   */
  data: Prisma.XOR<Prisma.IncomeDBCreateInput, Prisma.IncomeDBUncheckedCreateInput>
}

/**
 * IncomeDB createMany
 */
export type IncomeDBCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IncomeDBS.
   */
  data: Prisma.IncomeDBCreateManyInput | Prisma.IncomeDBCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IncomeDB createManyAndReturn
 */
export type IncomeDBCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * The data used to create many IncomeDBS.
   */
  data: Prisma.IncomeDBCreateManyInput | Prisma.IncomeDBCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * IncomeDB update
 */
export type IncomeDBUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * The data needed to update a IncomeDB.
   */
  data: Prisma.XOR<Prisma.IncomeDBUpdateInput, Prisma.IncomeDBUncheckedUpdateInput>
  /**
   * Choose, which IncomeDB to update.
   */
  where: Prisma.IncomeDBWhereUniqueInput
}

/**
 * IncomeDB updateMany
 */
export type IncomeDBUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IncomeDBS.
   */
  data: Prisma.XOR<Prisma.IncomeDBUpdateManyMutationInput, Prisma.IncomeDBUncheckedUpdateManyInput>
  /**
   * Filter which IncomeDBS to update
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * Limit how many IncomeDBS to update.
   */
  limit?: number
}

/**
 * IncomeDB updateManyAndReturn
 */
export type IncomeDBUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * The data used to update IncomeDBS.
   */
  data: Prisma.XOR<Prisma.IncomeDBUpdateManyMutationInput, Prisma.IncomeDBUncheckedUpdateManyInput>
  /**
   * Filter which IncomeDBS to update
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * Limit how many IncomeDBS to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * IncomeDB upsert
 */
export type IncomeDBUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * The filter to search for the IncomeDB to update in case it exists.
   */
  where: Prisma.IncomeDBWhereUniqueInput
  /**
   * In case the IncomeDB found by the `where` argument doesn't exist, create a new IncomeDB with this data.
   */
  create: Prisma.XOR<Prisma.IncomeDBCreateInput, Prisma.IncomeDBUncheckedCreateInput>
  /**
   * In case the IncomeDB was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IncomeDBUpdateInput, Prisma.IncomeDBUncheckedUpdateInput>
}

/**
 * IncomeDB delete
 */
export type IncomeDBDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  /**
   * Filter which IncomeDB to delete.
   */
  where: Prisma.IncomeDBWhereUniqueInput
}

/**
 * IncomeDB deleteMany
 */
export type IncomeDBDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncomeDBS to delete
   */
  where?: Prisma.IncomeDBWhereInput
  /**
   * Limit how many IncomeDBS to delete.
   */
  limit?: number
}

/**
 * IncomeDB without action
 */
export type IncomeDBDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
}
