
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PaymentMethodDB` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PaymentMethodDB
 * 
 */
export type PaymentMethodDBModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentMethodDBPayload>

export type AggregatePaymentMethodDB = {
  _count: PaymentMethodDBCountAggregateOutputType | null
  _min: PaymentMethodDBMinAggregateOutputType | null
  _max: PaymentMethodDBMaxAggregateOutputType | null
}

export type PaymentMethodDBMinAggregateOutputType = {
  payment_method_id: string | null
  name: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type PaymentMethodDBMaxAggregateOutputType = {
  payment_method_id: string | null
  name: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type PaymentMethodDBCountAggregateOutputType = {
  payment_method_id: number
  name: number
  created_at: number
  updated_at: number
  _all: number
}


export type PaymentMethodDBMinAggregateInputType = {
  payment_method_id?: true
  name?: true
  created_at?: true
  updated_at?: true
}

export type PaymentMethodDBMaxAggregateInputType = {
  payment_method_id?: true
  name?: true
  created_at?: true
  updated_at?: true
}

export type PaymentMethodDBCountAggregateInputType = {
  payment_method_id?: true
  name?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type PaymentMethodDBAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentMethodDB to aggregate.
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethodDBS to fetch.
   */
  orderBy?: Prisma.PaymentMethodDBOrderByWithRelationInput | Prisma.PaymentMethodDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentMethodDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethodDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethodDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentMethodDBS
  **/
  _count?: true | PaymentMethodDBCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentMethodDBMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentMethodDBMaxAggregateInputType
}

export type GetPaymentMethodDBAggregateType<T extends PaymentMethodDBAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentMethodDB]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentMethodDB[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentMethodDB[P]>
}




export type PaymentMethodDBGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentMethodDBWhereInput
  orderBy?: Prisma.PaymentMethodDBOrderByWithAggregationInput | Prisma.PaymentMethodDBOrderByWithAggregationInput[]
  by: Prisma.PaymentMethodDBScalarFieldEnum[] | Prisma.PaymentMethodDBScalarFieldEnum
  having?: Prisma.PaymentMethodDBScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentMethodDBCountAggregateInputType | true
  _min?: PaymentMethodDBMinAggregateInputType
  _max?: PaymentMethodDBMaxAggregateInputType
}

export type PaymentMethodDBGroupByOutputType = {
  payment_method_id: string
  name: string
  created_at: Date
  updated_at: Date
  _count: PaymentMethodDBCountAggregateOutputType | null
  _min: PaymentMethodDBMinAggregateOutputType | null
  _max: PaymentMethodDBMaxAggregateOutputType | null
}

type GetPaymentMethodDBGroupByPayload<T extends PaymentMethodDBGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentMethodDBGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentMethodDBGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentMethodDBGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentMethodDBGroupByOutputType[P]>
      }
    >
  > 



export type PaymentMethodDBWhereInput = {
  AND?: Prisma.PaymentMethodDBWhereInput | Prisma.PaymentMethodDBWhereInput[]
  OR?: Prisma.PaymentMethodDBWhereInput[]
  NOT?: Prisma.PaymentMethodDBWhereInput | Prisma.PaymentMethodDBWhereInput[]
  payment_method_id?: Prisma.StringFilter<"PaymentMethodDB"> | string
  name?: Prisma.StringFilter<"PaymentMethodDB"> | string
  created_at?: Prisma.DateTimeFilter<"PaymentMethodDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"PaymentMethodDB"> | Date | string
  IncomeDB?: Prisma.IncomeDBListRelationFilter
  ExpenseDB?: Prisma.ExpenseDBListRelationFilter
}

export type PaymentMethodDBOrderByWithRelationInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  IncomeDB?: Prisma.IncomeDBOrderByRelationAggregateInput
  ExpenseDB?: Prisma.ExpenseDBOrderByRelationAggregateInput
}

export type PaymentMethodDBWhereUniqueInput = Prisma.AtLeast<{
  payment_method_id?: string
  AND?: Prisma.PaymentMethodDBWhereInput | Prisma.PaymentMethodDBWhereInput[]
  OR?: Prisma.PaymentMethodDBWhereInput[]
  NOT?: Prisma.PaymentMethodDBWhereInput | Prisma.PaymentMethodDBWhereInput[]
  name?: Prisma.StringFilter<"PaymentMethodDB"> | string
  created_at?: Prisma.DateTimeFilter<"PaymentMethodDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"PaymentMethodDB"> | Date | string
  IncomeDB?: Prisma.IncomeDBListRelationFilter
  ExpenseDB?: Prisma.ExpenseDBListRelationFilter
}, "payment_method_id">

export type PaymentMethodDBOrderByWithAggregationInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.PaymentMethodDBCountOrderByAggregateInput
  _max?: Prisma.PaymentMethodDBMaxOrderByAggregateInput
  _min?: Prisma.PaymentMethodDBMinOrderByAggregateInput
}

export type PaymentMethodDBScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentMethodDBScalarWhereWithAggregatesInput | Prisma.PaymentMethodDBScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentMethodDBScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentMethodDBScalarWhereWithAggregatesInput | Prisma.PaymentMethodDBScalarWhereWithAggregatesInput[]
  payment_method_id?: Prisma.StringWithAggregatesFilter<"PaymentMethodDB"> | string
  name?: Prisma.StringWithAggregatesFilter<"PaymentMethodDB"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"PaymentMethodDB"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"PaymentMethodDB"> | Date | string
}

export type PaymentMethodDBCreateInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
  IncomeDB?: Prisma.IncomeDBCreateNestedManyWithoutPaymentMethodDBInput
  ExpenseDB?: Prisma.ExpenseDBCreateNestedManyWithoutPaymentMethodDBInput
}

export type PaymentMethodDBUncheckedCreateInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
  IncomeDB?: Prisma.IncomeDBUncheckedCreateNestedManyWithoutPaymentMethodDBInput
  ExpenseDB?: Prisma.ExpenseDBUncheckedCreateNestedManyWithoutPaymentMethodDBInput
}

export type PaymentMethodDBUpdateInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  IncomeDB?: Prisma.IncomeDBUpdateManyWithoutPaymentMethodDBNestedInput
  ExpenseDB?: Prisma.ExpenseDBUpdateManyWithoutPaymentMethodDBNestedInput
}

export type PaymentMethodDBUncheckedUpdateInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  IncomeDB?: Prisma.IncomeDBUncheckedUpdateManyWithoutPaymentMethodDBNestedInput
  ExpenseDB?: Prisma.ExpenseDBUncheckedUpdateManyWithoutPaymentMethodDBNestedInput
}

export type PaymentMethodDBCreateManyInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type PaymentMethodDBUpdateManyMutationInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentMethodDBUncheckedUpdateManyInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentMethodDBCountOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type PaymentMethodDBMaxOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type PaymentMethodDBMinOrderByAggregateInput = {
  payment_method_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type PaymentMethodDBScalarRelationFilter = {
  is?: Prisma.PaymentMethodDBWhereInput
  isNot?: Prisma.PaymentMethodDBWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type PaymentMethodDBCreateNestedOneWithoutIncomeDBInput = {
  create?: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutIncomeDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutIncomeDBInput>
  connectOrCreate?: Prisma.PaymentMethodDBCreateOrConnectWithoutIncomeDBInput
  connect?: Prisma.PaymentMethodDBWhereUniqueInput
}

export type PaymentMethodDBUpdateOneRequiredWithoutIncomeDBNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutIncomeDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutIncomeDBInput>
  connectOrCreate?: Prisma.PaymentMethodDBCreateOrConnectWithoutIncomeDBInput
  upsert?: Prisma.PaymentMethodDBUpsertWithoutIncomeDBInput
  connect?: Prisma.PaymentMethodDBWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentMethodDBUpdateToOneWithWhereWithoutIncomeDBInput, Prisma.PaymentMethodDBUpdateWithoutIncomeDBInput>, Prisma.PaymentMethodDBUncheckedUpdateWithoutIncomeDBInput>
}

export type PaymentMethodDBCreateNestedOneWithoutExpenseDBInput = {
  create?: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutExpenseDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutExpenseDBInput>
  connectOrCreate?: Prisma.PaymentMethodDBCreateOrConnectWithoutExpenseDBInput
  connect?: Prisma.PaymentMethodDBWhereUniqueInput
}

export type PaymentMethodDBUpdateOneRequiredWithoutExpenseDBNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutExpenseDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutExpenseDBInput>
  connectOrCreate?: Prisma.PaymentMethodDBCreateOrConnectWithoutExpenseDBInput
  upsert?: Prisma.PaymentMethodDBUpsertWithoutExpenseDBInput
  connect?: Prisma.PaymentMethodDBWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentMethodDBUpdateToOneWithWhereWithoutExpenseDBInput, Prisma.PaymentMethodDBUpdateWithoutExpenseDBInput>, Prisma.PaymentMethodDBUncheckedUpdateWithoutExpenseDBInput>
}

export type PaymentMethodDBCreateWithoutIncomeDBInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
  ExpenseDB?: Prisma.ExpenseDBCreateNestedManyWithoutPaymentMethodDBInput
}

export type PaymentMethodDBUncheckedCreateWithoutIncomeDBInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
  ExpenseDB?: Prisma.ExpenseDBUncheckedCreateNestedManyWithoutPaymentMethodDBInput
}

export type PaymentMethodDBCreateOrConnectWithoutIncomeDBInput = {
  where: Prisma.PaymentMethodDBWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutIncomeDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutIncomeDBInput>
}

export type PaymentMethodDBUpsertWithoutIncomeDBInput = {
  update: Prisma.XOR<Prisma.PaymentMethodDBUpdateWithoutIncomeDBInput, Prisma.PaymentMethodDBUncheckedUpdateWithoutIncomeDBInput>
  create: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutIncomeDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutIncomeDBInput>
  where?: Prisma.PaymentMethodDBWhereInput
}

export type PaymentMethodDBUpdateToOneWithWhereWithoutIncomeDBInput = {
  where?: Prisma.PaymentMethodDBWhereInput
  data: Prisma.XOR<Prisma.PaymentMethodDBUpdateWithoutIncomeDBInput, Prisma.PaymentMethodDBUncheckedUpdateWithoutIncomeDBInput>
}

export type PaymentMethodDBUpdateWithoutIncomeDBInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ExpenseDB?: Prisma.ExpenseDBUpdateManyWithoutPaymentMethodDBNestedInput
}

export type PaymentMethodDBUncheckedUpdateWithoutIncomeDBInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ExpenseDB?: Prisma.ExpenseDBUncheckedUpdateManyWithoutPaymentMethodDBNestedInput
}

export type PaymentMethodDBCreateWithoutExpenseDBInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
  IncomeDB?: Prisma.IncomeDBCreateNestedManyWithoutPaymentMethodDBInput
}

export type PaymentMethodDBUncheckedCreateWithoutExpenseDBInput = {
  payment_method_id?: string
  name: string
  created_at?: Date | string
  updated_at?: Date | string
  IncomeDB?: Prisma.IncomeDBUncheckedCreateNestedManyWithoutPaymentMethodDBInput
}

export type PaymentMethodDBCreateOrConnectWithoutExpenseDBInput = {
  where: Prisma.PaymentMethodDBWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutExpenseDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutExpenseDBInput>
}

export type PaymentMethodDBUpsertWithoutExpenseDBInput = {
  update: Prisma.XOR<Prisma.PaymentMethodDBUpdateWithoutExpenseDBInput, Prisma.PaymentMethodDBUncheckedUpdateWithoutExpenseDBInput>
  create: Prisma.XOR<Prisma.PaymentMethodDBCreateWithoutExpenseDBInput, Prisma.PaymentMethodDBUncheckedCreateWithoutExpenseDBInput>
  where?: Prisma.PaymentMethodDBWhereInput
}

export type PaymentMethodDBUpdateToOneWithWhereWithoutExpenseDBInput = {
  where?: Prisma.PaymentMethodDBWhereInput
  data: Prisma.XOR<Prisma.PaymentMethodDBUpdateWithoutExpenseDBInput, Prisma.PaymentMethodDBUncheckedUpdateWithoutExpenseDBInput>
}

export type PaymentMethodDBUpdateWithoutExpenseDBInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  IncomeDB?: Prisma.IncomeDBUpdateManyWithoutPaymentMethodDBNestedInput
}

export type PaymentMethodDBUncheckedUpdateWithoutExpenseDBInput = {
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  IncomeDB?: Prisma.IncomeDBUncheckedUpdateManyWithoutPaymentMethodDBNestedInput
}


/**
 * Count Type PaymentMethodDBCountOutputType
 */

export type PaymentMethodDBCountOutputType = {
  IncomeDB: number
  ExpenseDB: number
}

export type PaymentMethodDBCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  IncomeDB?: boolean | PaymentMethodDBCountOutputTypeCountIncomeDBArgs
  ExpenseDB?: boolean | PaymentMethodDBCountOutputTypeCountExpenseDBArgs
}

/**
 * PaymentMethodDBCountOutputType without action
 */
export type PaymentMethodDBCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDBCountOutputType
   */
  select?: Prisma.PaymentMethodDBCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PaymentMethodDBCountOutputType without action
 */
export type PaymentMethodDBCountOutputTypeCountIncomeDBArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncomeDBWhereInput
}

/**
 * PaymentMethodDBCountOutputType without action
 */
export type PaymentMethodDBCountOutputTypeCountExpenseDBArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExpenseDBWhereInput
}


export type PaymentMethodDBSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  payment_method_id?: boolean
  name?: boolean
  created_at?: boolean
  updated_at?: boolean
  IncomeDB?: boolean | Prisma.PaymentMethodDB$IncomeDBArgs<ExtArgs>
  ExpenseDB?: boolean | Prisma.PaymentMethodDB$ExpenseDBArgs<ExtArgs>
  _count?: boolean | Prisma.PaymentMethodDBCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentMethodDB"]>

export type PaymentMethodDBSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  payment_method_id?: boolean
  name?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["paymentMethodDB"]>

export type PaymentMethodDBSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  payment_method_id?: boolean
  name?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["paymentMethodDB"]>

export type PaymentMethodDBSelectScalar = {
  payment_method_id?: boolean
  name?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type PaymentMethodDBOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"payment_method_id" | "name" | "created_at" | "updated_at", ExtArgs["result"]["paymentMethodDB"]>
export type PaymentMethodDBInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  IncomeDB?: boolean | Prisma.PaymentMethodDB$IncomeDBArgs<ExtArgs>
  ExpenseDB?: boolean | Prisma.PaymentMethodDB$ExpenseDBArgs<ExtArgs>
  _count?: boolean | Prisma.PaymentMethodDBCountOutputTypeDefaultArgs<ExtArgs>
}
export type PaymentMethodDBIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PaymentMethodDBIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PaymentMethodDBPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentMethodDB"
  objects: {
    IncomeDB: Prisma.$IncomeDBPayload<ExtArgs>[]
    ExpenseDB: Prisma.$ExpenseDBPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    payment_method_id: string
    name: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["paymentMethodDB"]>
  composites: {}
}

export type PaymentMethodDBGetPayload<S extends boolean | null | undefined | PaymentMethodDBDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload, S>

export type PaymentMethodDBCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentMethodDBFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentMethodDBCountAggregateInputType | true
  }

export interface PaymentMethodDBDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMethodDB'], meta: { name: 'PaymentMethodDB' } }
  /**
   * Find zero or one PaymentMethodDB that matches the filter.
   * @param {PaymentMethodDBFindUniqueArgs} args - Arguments to find a PaymentMethodDB
   * @example
   * // Get one PaymentMethodDB
   * const paymentMethodDB = await prisma.paymentMethodDB.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentMethodDBFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentMethodDB that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentMethodDBFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethodDB
   * @example
   * // Get one PaymentMethodDB
   * const paymentMethodDB = await prisma.paymentMethodDB.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentMethodDBFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentMethodDB that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBFindFirstArgs} args - Arguments to find a PaymentMethodDB
   * @example
   * // Get one PaymentMethodDB
   * const paymentMethodDB = await prisma.paymentMethodDB.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentMethodDBFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDBFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentMethodDB that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBFindFirstOrThrowArgs} args - Arguments to find a PaymentMethodDB
   * @example
   * // Get one PaymentMethodDB
   * const paymentMethodDB = await prisma.paymentMethodDB.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentMethodDBFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDBFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentMethodDBS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentMethodDBS
   * const paymentMethodDBS = await prisma.paymentMethodDB.findMany()
   * 
   * // Get first 10 PaymentMethodDBS
   * const paymentMethodDBS = await prisma.paymentMethodDB.findMany({ take: 10 })
   * 
   * // Only select the `payment_method_id`
   * const paymentMethodDBWithPayment_method_idOnly = await prisma.paymentMethodDB.findMany({ select: { payment_method_id: true } })
   * 
   */
  findMany<T extends PaymentMethodDBFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDBFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentMethodDB.
   * @param {PaymentMethodDBCreateArgs} args - Arguments to create a PaymentMethodDB.
   * @example
   * // Create one PaymentMethodDB
   * const PaymentMethodDB = await prisma.paymentMethodDB.create({
   *   data: {
   *     // ... data to create a PaymentMethodDB
   *   }
   * })
   * 
   */
  create<T extends PaymentMethodDBCreateArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentMethodDBS.
   * @param {PaymentMethodDBCreateManyArgs} args - Arguments to create many PaymentMethodDBS.
   * @example
   * // Create many PaymentMethodDBS
   * const paymentMethodDB = await prisma.paymentMethodDB.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentMethodDBCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDBCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentMethodDBS and returns the data saved in the database.
   * @param {PaymentMethodDBCreateManyAndReturnArgs} args - Arguments to create many PaymentMethodDBS.
   * @example
   * // Create many PaymentMethodDBS
   * const paymentMethodDB = await prisma.paymentMethodDB.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentMethodDBS and only return the `payment_method_id`
   * const paymentMethodDBWithPayment_method_idOnly = await prisma.paymentMethodDB.createManyAndReturn({
   *   select: { payment_method_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentMethodDBCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDBCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentMethodDB.
   * @param {PaymentMethodDBDeleteArgs} args - Arguments to delete one PaymentMethodDB.
   * @example
   * // Delete one PaymentMethodDB
   * const PaymentMethodDB = await prisma.paymentMethodDB.delete({
   *   where: {
   *     // ... filter to delete one PaymentMethodDB
   *   }
   * })
   * 
   */
  delete<T extends PaymentMethodDBDeleteArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentMethodDB.
   * @param {PaymentMethodDBUpdateArgs} args - Arguments to update one PaymentMethodDB.
   * @example
   * // Update one PaymentMethodDB
   * const paymentMethodDB = await prisma.paymentMethodDB.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentMethodDBUpdateArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentMethodDBS.
   * @param {PaymentMethodDBDeleteManyArgs} args - Arguments to filter PaymentMethodDBS to delete.
   * @example
   * // Delete a few PaymentMethodDBS
   * const { count } = await prisma.paymentMethodDB.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentMethodDBDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDBDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentMethodDBS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentMethodDBS
   * const paymentMethodDB = await prisma.paymentMethodDB.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentMethodDBUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentMethodDBS and returns the data updated in the database.
   * @param {PaymentMethodDBUpdateManyAndReturnArgs} args - Arguments to update many PaymentMethodDBS.
   * @example
   * // Update many PaymentMethodDBS
   * const paymentMethodDB = await prisma.paymentMethodDB.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentMethodDBS and only return the `payment_method_id`
   * const paymentMethodDBWithPayment_method_idOnly = await prisma.paymentMethodDB.updateManyAndReturn({
   *   select: { payment_method_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentMethodDBUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentMethodDB.
   * @param {PaymentMethodDBUpsertArgs} args - Arguments to update or create a PaymentMethodDB.
   * @example
   * // Update or create a PaymentMethodDB
   * const paymentMethodDB = await prisma.paymentMethodDB.upsert({
   *   create: {
   *     // ... data to create a PaymentMethodDB
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentMethodDB we want to update
   *   }
   * })
   */
  upsert<T extends PaymentMethodDBUpsertArgs>(args: Prisma.SelectSubset<T, PaymentMethodDBUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentMethodDBS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBCountArgs} args - Arguments to filter PaymentMethodDBS to count.
   * @example
   * // Count the number of PaymentMethodDBS
   * const count = await prisma.paymentMethodDB.count({
   *   where: {
   *     // ... the filter for the PaymentMethodDBS we want to count
   *   }
   * })
  **/
  count<T extends PaymentMethodDBCountArgs>(
    args?: Prisma.Subset<T, PaymentMethodDBCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentMethodDBCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentMethodDB.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentMethodDBAggregateArgs>(args: Prisma.Subset<T, PaymentMethodDBAggregateArgs>): Prisma.PrismaPromise<GetPaymentMethodDBAggregateType<T>>

  /**
   * Group by PaymentMethodDB.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodDBGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentMethodDBGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentMethodDBGroupByArgs['orderBy'] }
      : { orderBy?: PaymentMethodDBGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentMethodDBGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMethodDBGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentMethodDB model
 */
readonly fields: PaymentMethodDBFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentMethodDB.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentMethodDBClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  IncomeDB<T extends Prisma.PaymentMethodDB$IncomeDBArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentMethodDB$IncomeDBArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeDBPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  ExpenseDB<T extends Prisma.PaymentMethodDB$ExpenseDBArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentMethodDB$ExpenseDBArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentMethodDB model
 */
export interface PaymentMethodDBFieldRefs {
  readonly payment_method_id: Prisma.FieldRef<"PaymentMethodDB", 'String'>
  readonly name: Prisma.FieldRef<"PaymentMethodDB", 'String'>
  readonly created_at: Prisma.FieldRef<"PaymentMethodDB", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"PaymentMethodDB", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PaymentMethodDB findUnique
 */
export type PaymentMethodDBFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * Filter, which PaymentMethodDB to fetch.
   */
  where: Prisma.PaymentMethodDBWhereUniqueInput
}

/**
 * PaymentMethodDB findUniqueOrThrow
 */
export type PaymentMethodDBFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * Filter, which PaymentMethodDB to fetch.
   */
  where: Prisma.PaymentMethodDBWhereUniqueInput
}

/**
 * PaymentMethodDB findFirst
 */
export type PaymentMethodDBFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * Filter, which PaymentMethodDB to fetch.
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethodDBS to fetch.
   */
  orderBy?: Prisma.PaymentMethodDBOrderByWithRelationInput | Prisma.PaymentMethodDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentMethodDBS.
   */
  cursor?: Prisma.PaymentMethodDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethodDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethodDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentMethodDBS.
   */
  distinct?: Prisma.PaymentMethodDBScalarFieldEnum | Prisma.PaymentMethodDBScalarFieldEnum[]
}

/**
 * PaymentMethodDB findFirstOrThrow
 */
export type PaymentMethodDBFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * Filter, which PaymentMethodDB to fetch.
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethodDBS to fetch.
   */
  orderBy?: Prisma.PaymentMethodDBOrderByWithRelationInput | Prisma.PaymentMethodDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentMethodDBS.
   */
  cursor?: Prisma.PaymentMethodDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethodDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethodDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentMethodDBS.
   */
  distinct?: Prisma.PaymentMethodDBScalarFieldEnum | Prisma.PaymentMethodDBScalarFieldEnum[]
}

/**
 * PaymentMethodDB findMany
 */
export type PaymentMethodDBFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * Filter, which PaymentMethodDBS to fetch.
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethodDBS to fetch.
   */
  orderBy?: Prisma.PaymentMethodDBOrderByWithRelationInput | Prisma.PaymentMethodDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentMethodDBS.
   */
  cursor?: Prisma.PaymentMethodDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethodDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethodDBS.
   */
  skip?: number
  distinct?: Prisma.PaymentMethodDBScalarFieldEnum | Prisma.PaymentMethodDBScalarFieldEnum[]
}

/**
 * PaymentMethodDB create
 */
export type PaymentMethodDBCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * The data needed to create a PaymentMethodDB.
   */
  data: Prisma.XOR<Prisma.PaymentMethodDBCreateInput, Prisma.PaymentMethodDBUncheckedCreateInput>
}

/**
 * PaymentMethodDB createMany
 */
export type PaymentMethodDBCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentMethodDBS.
   */
  data: Prisma.PaymentMethodDBCreateManyInput | Prisma.PaymentMethodDBCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentMethodDB createManyAndReturn
 */
export type PaymentMethodDBCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentMethodDBS.
   */
  data: Prisma.PaymentMethodDBCreateManyInput | Prisma.PaymentMethodDBCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentMethodDB update
 */
export type PaymentMethodDBUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * The data needed to update a PaymentMethodDB.
   */
  data: Prisma.XOR<Prisma.PaymentMethodDBUpdateInput, Prisma.PaymentMethodDBUncheckedUpdateInput>
  /**
   * Choose, which PaymentMethodDB to update.
   */
  where: Prisma.PaymentMethodDBWhereUniqueInput
}

/**
 * PaymentMethodDB updateMany
 */
export type PaymentMethodDBUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentMethodDBS.
   */
  data: Prisma.XOR<Prisma.PaymentMethodDBUpdateManyMutationInput, Prisma.PaymentMethodDBUncheckedUpdateManyInput>
  /**
   * Filter which PaymentMethodDBS to update
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * Limit how many PaymentMethodDBS to update.
   */
  limit?: number
}

/**
 * PaymentMethodDB updateManyAndReturn
 */
export type PaymentMethodDBUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * The data used to update PaymentMethodDBS.
   */
  data: Prisma.XOR<Prisma.PaymentMethodDBUpdateManyMutationInput, Prisma.PaymentMethodDBUncheckedUpdateManyInput>
  /**
   * Filter which PaymentMethodDBS to update
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * Limit how many PaymentMethodDBS to update.
   */
  limit?: number
}

/**
 * PaymentMethodDB upsert
 */
export type PaymentMethodDBUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * The filter to search for the PaymentMethodDB to update in case it exists.
   */
  where: Prisma.PaymentMethodDBWhereUniqueInput
  /**
   * In case the PaymentMethodDB found by the `where` argument doesn't exist, create a new PaymentMethodDB with this data.
   */
  create: Prisma.XOR<Prisma.PaymentMethodDBCreateInput, Prisma.PaymentMethodDBUncheckedCreateInput>
  /**
   * In case the PaymentMethodDB was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentMethodDBUpdateInput, Prisma.PaymentMethodDBUncheckedUpdateInput>
}

/**
 * PaymentMethodDB delete
 */
export type PaymentMethodDBDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
  /**
   * Filter which PaymentMethodDB to delete.
   */
  where: Prisma.PaymentMethodDBWhereUniqueInput
}

/**
 * PaymentMethodDB deleteMany
 */
export type PaymentMethodDBDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentMethodDBS to delete
   */
  where?: Prisma.PaymentMethodDBWhereInput
  /**
   * Limit how many PaymentMethodDBS to delete.
   */
  limit?: number
}

/**
 * PaymentMethodDB.IncomeDB
 */
export type PaymentMethodDB$IncomeDBArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeDB
   */
  select?: Prisma.IncomeDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeDB
   */
  omit?: Prisma.IncomeDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeDBInclude<ExtArgs> | null
  where?: Prisma.IncomeDBWhereInput
  orderBy?: Prisma.IncomeDBOrderByWithRelationInput | Prisma.IncomeDBOrderByWithRelationInput[]
  cursor?: Prisma.IncomeDBWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IncomeDBScalarFieldEnum | Prisma.IncomeDBScalarFieldEnum[]
}

/**
 * PaymentMethodDB.ExpenseDB
 */
export type PaymentMethodDB$ExpenseDBArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  where?: Prisma.ExpenseDBWhereInput
  orderBy?: Prisma.ExpenseDBOrderByWithRelationInput | Prisma.ExpenseDBOrderByWithRelationInput[]
  cursor?: Prisma.ExpenseDBWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExpenseDBScalarFieldEnum | Prisma.ExpenseDBScalarFieldEnum[]
}

/**
 * PaymentMethodDB without action
 */
export type PaymentMethodDBDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethodDB
   */
  select?: Prisma.PaymentMethodDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethodDB
   */
  omit?: Prisma.PaymentMethodDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentMethodDBInclude<ExtArgs> | null
}
