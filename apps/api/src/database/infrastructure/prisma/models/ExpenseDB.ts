
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExpenseDB` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExpenseDB
 * 
 */
export type ExpenseDBModel = runtime.Types.Result.DefaultSelection<Prisma.$ExpenseDBPayload>

export type AggregateExpenseDB = {
  _count: ExpenseDBCountAggregateOutputType | null
  _avg: ExpenseDBAvgAggregateOutputType | null
  _sum: ExpenseDBSumAggregateOutputType | null
  _min: ExpenseDBMinAggregateOutputType | null
  _max: ExpenseDBMaxAggregateOutputType | null
}

export type ExpenseDBAvgAggregateOutputType = {
  amount: number | null
}

export type ExpenseDBSumAggregateOutputType = {
  amount: number | null
}

export type ExpenseDBMinAggregateOutputType = {
  expense_id: string | null
  amount: number | null
  transaction_date: Date | null
  created_at: Date | null
  updated_at: Date | null
  payment_method_id: string | null
}

export type ExpenseDBMaxAggregateOutputType = {
  expense_id: string | null
  amount: number | null
  transaction_date: Date | null
  created_at: Date | null
  updated_at: Date | null
  payment_method_id: string | null
}

export type ExpenseDBCountAggregateOutputType = {
  expense_id: number
  amount: number
  transaction_date: number
  created_at: number
  updated_at: number
  payment_method_id: number
  _all: number
}


export type ExpenseDBAvgAggregateInputType = {
  amount?: true
}

export type ExpenseDBSumAggregateInputType = {
  amount?: true
}

export type ExpenseDBMinAggregateInputType = {
  expense_id?: true
  amount?: true
  transaction_date?: true
  created_at?: true
  updated_at?: true
  payment_method_id?: true
}

export type ExpenseDBMaxAggregateInputType = {
  expense_id?: true
  amount?: true
  transaction_date?: true
  created_at?: true
  updated_at?: true
  payment_method_id?: true
}

export type ExpenseDBCountAggregateInputType = {
  expense_id?: true
  amount?: true
  transaction_date?: true
  created_at?: true
  updated_at?: true
  payment_method_id?: true
  _all?: true
}

export type ExpenseDBAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExpenseDB to aggregate.
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExpenseDBS to fetch.
   */
  orderBy?: Prisma.ExpenseDBOrderByWithRelationInput | Prisma.ExpenseDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExpenseDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExpenseDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExpenseDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExpenseDBS
  **/
  _count?: true | ExpenseDBCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExpenseDBAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExpenseDBSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExpenseDBMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExpenseDBMaxAggregateInputType
}

export type GetExpenseDBAggregateType<T extends ExpenseDBAggregateArgs> = {
      [P in keyof T & keyof AggregateExpenseDB]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExpenseDB[P]>
    : Prisma.GetScalarType<T[P], AggregateExpenseDB[P]>
}




export type ExpenseDBGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExpenseDBWhereInput
  orderBy?: Prisma.ExpenseDBOrderByWithAggregationInput | Prisma.ExpenseDBOrderByWithAggregationInput[]
  by: Prisma.ExpenseDBScalarFieldEnum[] | Prisma.ExpenseDBScalarFieldEnum
  having?: Prisma.ExpenseDBScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExpenseDBCountAggregateInputType | true
  _avg?: ExpenseDBAvgAggregateInputType
  _sum?: ExpenseDBSumAggregateInputType
  _min?: ExpenseDBMinAggregateInputType
  _max?: ExpenseDBMaxAggregateInputType
}

export type ExpenseDBGroupByOutputType = {
  expense_id: string
  amount: number
  transaction_date: Date
  created_at: Date
  updated_at: Date
  payment_method_id: string
  _count: ExpenseDBCountAggregateOutputType | null
  _avg: ExpenseDBAvgAggregateOutputType | null
  _sum: ExpenseDBSumAggregateOutputType | null
  _min: ExpenseDBMinAggregateOutputType | null
  _max: ExpenseDBMaxAggregateOutputType | null
}

type GetExpenseDBGroupByPayload<T extends ExpenseDBGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExpenseDBGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExpenseDBGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExpenseDBGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExpenseDBGroupByOutputType[P]>
      }
    >
  > 



export type ExpenseDBWhereInput = {
  AND?: Prisma.ExpenseDBWhereInput | Prisma.ExpenseDBWhereInput[]
  OR?: Prisma.ExpenseDBWhereInput[]
  NOT?: Prisma.ExpenseDBWhereInput | Prisma.ExpenseDBWhereInput[]
  expense_id?: Prisma.StringFilter<"ExpenseDB"> | string
  amount?: Prisma.IntFilter<"ExpenseDB"> | number
  transaction_date?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  created_at?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  payment_method_id?: Prisma.StringFilter<"ExpenseDB"> | string
  PaymentMethodDB?: Prisma.XOR<Prisma.PaymentMethodDBScalarRelationFilter, Prisma.PaymentMethodDBWhereInput>
}

export type ExpenseDBOrderByWithRelationInput = {
  expense_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transaction_date?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
  PaymentMethodDB?: Prisma.PaymentMethodDBOrderByWithRelationInput
}

export type ExpenseDBWhereUniqueInput = Prisma.AtLeast<{
  expense_id?: string
  AND?: Prisma.ExpenseDBWhereInput | Prisma.ExpenseDBWhereInput[]
  OR?: Prisma.ExpenseDBWhereInput[]
  NOT?: Prisma.ExpenseDBWhereInput | Prisma.ExpenseDBWhereInput[]
  amount?: Prisma.IntFilter<"ExpenseDB"> | number
  transaction_date?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  created_at?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  payment_method_id?: Prisma.StringFilter<"ExpenseDB"> | string
  PaymentMethodDB?: Prisma.XOR<Prisma.PaymentMethodDBScalarRelationFilter, Prisma.PaymentMethodDBWhereInput>
}, "expense_id">

export type ExpenseDBOrderByWithAggregationInput = {
  expense_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transaction_date?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
  _count?: Prisma.ExpenseDBCountOrderByAggregateInput
  _avg?: Prisma.ExpenseDBAvgOrderByAggregateInput
  _max?: Prisma.ExpenseDBMaxOrderByAggregateInput
  _min?: Prisma.ExpenseDBMinOrderByAggregateInput
  _sum?: Prisma.ExpenseDBSumOrderByAggregateInput
}

export type ExpenseDBScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExpenseDBScalarWhereWithAggregatesInput | Prisma.ExpenseDBScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExpenseDBScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExpenseDBScalarWhereWithAggregatesInput | Prisma.ExpenseDBScalarWhereWithAggregatesInput[]
  expense_id?: Prisma.StringWithAggregatesFilter<"ExpenseDB"> | string
  amount?: Prisma.IntWithAggregatesFilter<"ExpenseDB"> | number
  transaction_date?: Prisma.DateTimeWithAggregatesFilter<"ExpenseDB"> | Date | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"ExpenseDB"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"ExpenseDB"> | Date | string
  payment_method_id?: Prisma.StringWithAggregatesFilter<"ExpenseDB"> | string
}

export type ExpenseDBCreateInput = {
  expense_id?: string
  amount: number
  transaction_date?: Date | string
  created_at?: Date | string
  updated_at?: Date | string
  PaymentMethodDB: Prisma.PaymentMethodDBCreateNestedOneWithoutExpenseDBInput
}

export type ExpenseDBUncheckedCreateInput = {
  expense_id?: string
  amount: number
  transaction_date?: Date | string
  created_at?: Date | string
  updated_at?: Date | string
  payment_method_id: string
}

export type ExpenseDBUpdateInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  PaymentMethodDB?: Prisma.PaymentMethodDBUpdateOneRequiredWithoutExpenseDBNestedInput
}

export type ExpenseDBUncheckedUpdateInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExpenseDBCreateManyInput = {
  expense_id?: string
  amount: number
  transaction_date?: Date | string
  created_at?: Date | string
  updated_at?: Date | string
  payment_method_id: string
}

export type ExpenseDBUpdateManyMutationInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExpenseDBUncheckedUpdateManyInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment_method_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExpenseDBListRelationFilter = {
  every?: Prisma.ExpenseDBWhereInput
  some?: Prisma.ExpenseDBWhereInput
  none?: Prisma.ExpenseDBWhereInput
}

export type ExpenseDBOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExpenseDBCountOrderByAggregateInput = {
  expense_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transaction_date?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
}

export type ExpenseDBAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type ExpenseDBMaxOrderByAggregateInput = {
  expense_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transaction_date?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
}

export type ExpenseDBMinOrderByAggregateInput = {
  expense_id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transaction_date?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  payment_method_id?: Prisma.SortOrder
}

export type ExpenseDBSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type ExpenseDBCreateNestedManyWithoutPaymentMethodDBInput = {
  create?: Prisma.XOR<Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput[] | Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput[]
  createMany?: Prisma.ExpenseDBCreateManyPaymentMethodDBInputEnvelope
  connect?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
}

export type ExpenseDBUncheckedCreateNestedManyWithoutPaymentMethodDBInput = {
  create?: Prisma.XOR<Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput[] | Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput[]
  createMany?: Prisma.ExpenseDBCreateManyPaymentMethodDBInputEnvelope
  connect?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
}

export type ExpenseDBUpdateManyWithoutPaymentMethodDBNestedInput = {
  create?: Prisma.XOR<Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput[] | Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput[]
  upsert?: Prisma.ExpenseDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.ExpenseDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput[]
  createMany?: Prisma.ExpenseDBCreateManyPaymentMethodDBInputEnvelope
  set?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  disconnect?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  delete?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  connect?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  update?: Prisma.ExpenseDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.ExpenseDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput[]
  updateMany?: Prisma.ExpenseDBUpdateManyWithWhereWithoutPaymentMethodDBInput | Prisma.ExpenseDBUpdateManyWithWhereWithoutPaymentMethodDBInput[]
  deleteMany?: Prisma.ExpenseDBScalarWhereInput | Prisma.ExpenseDBScalarWhereInput[]
}

export type ExpenseDBUncheckedUpdateManyWithoutPaymentMethodDBNestedInput = {
  create?: Prisma.XOR<Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput> | Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput[] | Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput[]
  connectOrCreate?: Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput | Prisma.ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput[]
  upsert?: Prisma.ExpenseDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.ExpenseDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput[]
  createMany?: Prisma.ExpenseDBCreateManyPaymentMethodDBInputEnvelope
  set?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  disconnect?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  delete?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  connect?: Prisma.ExpenseDBWhereUniqueInput | Prisma.ExpenseDBWhereUniqueInput[]
  update?: Prisma.ExpenseDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput | Prisma.ExpenseDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput[]
  updateMany?: Prisma.ExpenseDBUpdateManyWithWhereWithoutPaymentMethodDBInput | Prisma.ExpenseDBUpdateManyWithWhereWithoutPaymentMethodDBInput[]
  deleteMany?: Prisma.ExpenseDBScalarWhereInput | Prisma.ExpenseDBScalarWhereInput[]
}

export type ExpenseDBCreateWithoutPaymentMethodDBInput = {
  expense_id?: string
  amount: number
  transaction_date?: Date | string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput = {
  expense_id?: string
  amount: number
  transaction_date?: Date | string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ExpenseDBCreateOrConnectWithoutPaymentMethodDBInput = {
  where: Prisma.ExpenseDBWhereUniqueInput
  create: Prisma.XOR<Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput>
}

export type ExpenseDBCreateManyPaymentMethodDBInputEnvelope = {
  data: Prisma.ExpenseDBCreateManyPaymentMethodDBInput | Prisma.ExpenseDBCreateManyPaymentMethodDBInput[]
  skipDuplicates?: boolean
}

export type ExpenseDBUpsertWithWhereUniqueWithoutPaymentMethodDBInput = {
  where: Prisma.ExpenseDBWhereUniqueInput
  update: Prisma.XOR<Prisma.ExpenseDBUpdateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedUpdateWithoutPaymentMethodDBInput>
  create: Prisma.XOR<Prisma.ExpenseDBCreateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedCreateWithoutPaymentMethodDBInput>
}

export type ExpenseDBUpdateWithWhereUniqueWithoutPaymentMethodDBInput = {
  where: Prisma.ExpenseDBWhereUniqueInput
  data: Prisma.XOR<Prisma.ExpenseDBUpdateWithoutPaymentMethodDBInput, Prisma.ExpenseDBUncheckedUpdateWithoutPaymentMethodDBInput>
}

export type ExpenseDBUpdateManyWithWhereWithoutPaymentMethodDBInput = {
  where: Prisma.ExpenseDBScalarWhereInput
  data: Prisma.XOR<Prisma.ExpenseDBUpdateManyMutationInput, Prisma.ExpenseDBUncheckedUpdateManyWithoutPaymentMethodDBInput>
}

export type ExpenseDBScalarWhereInput = {
  AND?: Prisma.ExpenseDBScalarWhereInput | Prisma.ExpenseDBScalarWhereInput[]
  OR?: Prisma.ExpenseDBScalarWhereInput[]
  NOT?: Prisma.ExpenseDBScalarWhereInput | Prisma.ExpenseDBScalarWhereInput[]
  expense_id?: Prisma.StringFilter<"ExpenseDB"> | string
  amount?: Prisma.IntFilter<"ExpenseDB"> | number
  transaction_date?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  created_at?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ExpenseDB"> | Date | string
  payment_method_id?: Prisma.StringFilter<"ExpenseDB"> | string
}

export type ExpenseDBCreateManyPaymentMethodDBInput = {
  expense_id?: string
  amount: number
  transaction_date?: Date | string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ExpenseDBUpdateWithoutPaymentMethodDBInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExpenseDBUncheckedUpdateWithoutPaymentMethodDBInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExpenseDBUncheckedUpdateManyWithoutPaymentMethodDBInput = {
  expense_id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  transaction_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ExpenseDBSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  expense_id?: boolean
  amount?: boolean
  transaction_date?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}, ExtArgs["result"]["expenseDB"]>

export type ExpenseDBSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  expense_id?: boolean
  amount?: boolean
  transaction_date?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}, ExtArgs["result"]["expenseDB"]>

export type ExpenseDBSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  expense_id?: boolean
  amount?: boolean
  transaction_date?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}, ExtArgs["result"]["expenseDB"]>

export type ExpenseDBSelectScalar = {
  expense_id?: boolean
  amount?: boolean
  transaction_date?: boolean
  created_at?: boolean
  updated_at?: boolean
  payment_method_id?: boolean
}

export type ExpenseDBOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"expense_id" | "amount" | "transaction_date" | "created_at" | "updated_at" | "payment_method_id", ExtArgs["result"]["expenseDB"]>
export type ExpenseDBInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}
export type ExpenseDBIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}
export type ExpenseDBIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  PaymentMethodDB?: boolean | Prisma.PaymentMethodDBDefaultArgs<ExtArgs>
}

export type $ExpenseDBPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExpenseDB"
  objects: {
    PaymentMethodDB: Prisma.$PaymentMethodDBPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    expense_id: string
    amount: number
    transaction_date: Date
    created_at: Date
    updated_at: Date
    payment_method_id: string
  }, ExtArgs["result"]["expenseDB"]>
  composites: {}
}

export type ExpenseDBGetPayload<S extends boolean | null | undefined | ExpenseDBDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload, S>

export type ExpenseDBCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExpenseDBFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExpenseDBCountAggregateInputType | true
  }

export interface ExpenseDBDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExpenseDB'], meta: { name: 'ExpenseDB' } }
  /**
   * Find zero or one ExpenseDB that matches the filter.
   * @param {ExpenseDBFindUniqueArgs} args - Arguments to find a ExpenseDB
   * @example
   * // Get one ExpenseDB
   * const expenseDB = await prisma.expenseDB.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExpenseDBFindUniqueArgs>(args: Prisma.SelectSubset<T, ExpenseDBFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExpenseDB that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExpenseDBFindUniqueOrThrowArgs} args - Arguments to find a ExpenseDB
   * @example
   * // Get one ExpenseDB
   * const expenseDB = await prisma.expenseDB.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExpenseDBFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExpenseDBFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExpenseDB that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBFindFirstArgs} args - Arguments to find a ExpenseDB
   * @example
   * // Get one ExpenseDB
   * const expenseDB = await prisma.expenseDB.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExpenseDBFindFirstArgs>(args?: Prisma.SelectSubset<T, ExpenseDBFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExpenseDB that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBFindFirstOrThrowArgs} args - Arguments to find a ExpenseDB
   * @example
   * // Get one ExpenseDB
   * const expenseDB = await prisma.expenseDB.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExpenseDBFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExpenseDBFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExpenseDBS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExpenseDBS
   * const expenseDBS = await prisma.expenseDB.findMany()
   * 
   * // Get first 10 ExpenseDBS
   * const expenseDBS = await prisma.expenseDB.findMany({ take: 10 })
   * 
   * // Only select the `expense_id`
   * const expenseDBWithExpense_idOnly = await prisma.expenseDB.findMany({ select: { expense_id: true } })
   * 
   */
  findMany<T extends ExpenseDBFindManyArgs>(args?: Prisma.SelectSubset<T, ExpenseDBFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExpenseDB.
   * @param {ExpenseDBCreateArgs} args - Arguments to create a ExpenseDB.
   * @example
   * // Create one ExpenseDB
   * const ExpenseDB = await prisma.expenseDB.create({
   *   data: {
   *     // ... data to create a ExpenseDB
   *   }
   * })
   * 
   */
  create<T extends ExpenseDBCreateArgs>(args: Prisma.SelectSubset<T, ExpenseDBCreateArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExpenseDBS.
   * @param {ExpenseDBCreateManyArgs} args - Arguments to create many ExpenseDBS.
   * @example
   * // Create many ExpenseDBS
   * const expenseDB = await prisma.expenseDB.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExpenseDBCreateManyArgs>(args?: Prisma.SelectSubset<T, ExpenseDBCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExpenseDBS and returns the data saved in the database.
   * @param {ExpenseDBCreateManyAndReturnArgs} args - Arguments to create many ExpenseDBS.
   * @example
   * // Create many ExpenseDBS
   * const expenseDB = await prisma.expenseDB.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExpenseDBS and only return the `expense_id`
   * const expenseDBWithExpense_idOnly = await prisma.expenseDB.createManyAndReturn({
   *   select: { expense_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExpenseDBCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExpenseDBCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExpenseDB.
   * @param {ExpenseDBDeleteArgs} args - Arguments to delete one ExpenseDB.
   * @example
   * // Delete one ExpenseDB
   * const ExpenseDB = await prisma.expenseDB.delete({
   *   where: {
   *     // ... filter to delete one ExpenseDB
   *   }
   * })
   * 
   */
  delete<T extends ExpenseDBDeleteArgs>(args: Prisma.SelectSubset<T, ExpenseDBDeleteArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExpenseDB.
   * @param {ExpenseDBUpdateArgs} args - Arguments to update one ExpenseDB.
   * @example
   * // Update one ExpenseDB
   * const expenseDB = await prisma.expenseDB.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExpenseDBUpdateArgs>(args: Prisma.SelectSubset<T, ExpenseDBUpdateArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExpenseDBS.
   * @param {ExpenseDBDeleteManyArgs} args - Arguments to filter ExpenseDBS to delete.
   * @example
   * // Delete a few ExpenseDBS
   * const { count } = await prisma.expenseDB.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExpenseDBDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExpenseDBDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExpenseDBS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExpenseDBS
   * const expenseDB = await prisma.expenseDB.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExpenseDBUpdateManyArgs>(args: Prisma.SelectSubset<T, ExpenseDBUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExpenseDBS and returns the data updated in the database.
   * @param {ExpenseDBUpdateManyAndReturnArgs} args - Arguments to update many ExpenseDBS.
   * @example
   * // Update many ExpenseDBS
   * const expenseDB = await prisma.expenseDB.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExpenseDBS and only return the `expense_id`
   * const expenseDBWithExpense_idOnly = await prisma.expenseDB.updateManyAndReturn({
   *   select: { expense_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExpenseDBUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExpenseDBUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExpenseDB.
   * @param {ExpenseDBUpsertArgs} args - Arguments to update or create a ExpenseDB.
   * @example
   * // Update or create a ExpenseDB
   * const expenseDB = await prisma.expenseDB.upsert({
   *   create: {
   *     // ... data to create a ExpenseDB
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExpenseDB we want to update
   *   }
   * })
   */
  upsert<T extends ExpenseDBUpsertArgs>(args: Prisma.SelectSubset<T, ExpenseDBUpsertArgs<ExtArgs>>): Prisma.Prisma__ExpenseDBClient<runtime.Types.Result.GetResult<Prisma.$ExpenseDBPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExpenseDBS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBCountArgs} args - Arguments to filter ExpenseDBS to count.
   * @example
   * // Count the number of ExpenseDBS
   * const count = await prisma.expenseDB.count({
   *   where: {
   *     // ... the filter for the ExpenseDBS we want to count
   *   }
   * })
  **/
  count<T extends ExpenseDBCountArgs>(
    args?: Prisma.Subset<T, ExpenseDBCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExpenseDBCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExpenseDB.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExpenseDBAggregateArgs>(args: Prisma.Subset<T, ExpenseDBAggregateArgs>): Prisma.PrismaPromise<GetExpenseDBAggregateType<T>>

  /**
   * Group by ExpenseDB.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExpenseDBGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExpenseDBGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExpenseDBGroupByArgs['orderBy'] }
      : { orderBy?: ExpenseDBGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExpenseDBGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseDBGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExpenseDB model
 */
readonly fields: ExpenseDBFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExpenseDB.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExpenseDBClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  PaymentMethodDB<T extends Prisma.PaymentMethodDBDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentMethodDBDefaultArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodDBClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodDBPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExpenseDB model
 */
export interface ExpenseDBFieldRefs {
  readonly expense_id: Prisma.FieldRef<"ExpenseDB", 'String'>
  readonly amount: Prisma.FieldRef<"ExpenseDB", 'Int'>
  readonly transaction_date: Prisma.FieldRef<"ExpenseDB", 'DateTime'>
  readonly created_at: Prisma.FieldRef<"ExpenseDB", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"ExpenseDB", 'DateTime'>
  readonly payment_method_id: Prisma.FieldRef<"ExpenseDB", 'String'>
}
    

// Custom InputTypes
/**
 * ExpenseDB findUnique
 */
export type ExpenseDBFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * Filter, which ExpenseDB to fetch.
   */
  where: Prisma.ExpenseDBWhereUniqueInput
}

/**
 * ExpenseDB findUniqueOrThrow
 */
export type ExpenseDBFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * Filter, which ExpenseDB to fetch.
   */
  where: Prisma.ExpenseDBWhereUniqueInput
}

/**
 * ExpenseDB findFirst
 */
export type ExpenseDBFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * Filter, which ExpenseDB to fetch.
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExpenseDBS to fetch.
   */
  orderBy?: Prisma.ExpenseDBOrderByWithRelationInput | Prisma.ExpenseDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExpenseDBS.
   */
  cursor?: Prisma.ExpenseDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExpenseDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExpenseDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExpenseDBS.
   */
  distinct?: Prisma.ExpenseDBScalarFieldEnum | Prisma.ExpenseDBScalarFieldEnum[]
}

/**
 * ExpenseDB findFirstOrThrow
 */
export type ExpenseDBFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * Filter, which ExpenseDB to fetch.
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExpenseDBS to fetch.
   */
  orderBy?: Prisma.ExpenseDBOrderByWithRelationInput | Prisma.ExpenseDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExpenseDBS.
   */
  cursor?: Prisma.ExpenseDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExpenseDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExpenseDBS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExpenseDBS.
   */
  distinct?: Prisma.ExpenseDBScalarFieldEnum | Prisma.ExpenseDBScalarFieldEnum[]
}

/**
 * ExpenseDB findMany
 */
export type ExpenseDBFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * Filter, which ExpenseDBS to fetch.
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExpenseDBS to fetch.
   */
  orderBy?: Prisma.ExpenseDBOrderByWithRelationInput | Prisma.ExpenseDBOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExpenseDBS.
   */
  cursor?: Prisma.ExpenseDBWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExpenseDBS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExpenseDBS.
   */
  skip?: number
  distinct?: Prisma.ExpenseDBScalarFieldEnum | Prisma.ExpenseDBScalarFieldEnum[]
}

/**
 * ExpenseDB create
 */
export type ExpenseDBCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * The data needed to create a ExpenseDB.
   */
  data: Prisma.XOR<Prisma.ExpenseDBCreateInput, Prisma.ExpenseDBUncheckedCreateInput>
}

/**
 * ExpenseDB createMany
 */
export type ExpenseDBCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExpenseDBS.
   */
  data: Prisma.ExpenseDBCreateManyInput | Prisma.ExpenseDBCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExpenseDB createManyAndReturn
 */
export type ExpenseDBCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * The data used to create many ExpenseDBS.
   */
  data: Prisma.ExpenseDBCreateManyInput | Prisma.ExpenseDBCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExpenseDB update
 */
export type ExpenseDBUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * The data needed to update a ExpenseDB.
   */
  data: Prisma.XOR<Prisma.ExpenseDBUpdateInput, Prisma.ExpenseDBUncheckedUpdateInput>
  /**
   * Choose, which ExpenseDB to update.
   */
  where: Prisma.ExpenseDBWhereUniqueInput
}

/**
 * ExpenseDB updateMany
 */
export type ExpenseDBUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExpenseDBS.
   */
  data: Prisma.XOR<Prisma.ExpenseDBUpdateManyMutationInput, Prisma.ExpenseDBUncheckedUpdateManyInput>
  /**
   * Filter which ExpenseDBS to update
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * Limit how many ExpenseDBS to update.
   */
  limit?: number
}

/**
 * ExpenseDB updateManyAndReturn
 */
export type ExpenseDBUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * The data used to update ExpenseDBS.
   */
  data: Prisma.XOR<Prisma.ExpenseDBUpdateManyMutationInput, Prisma.ExpenseDBUncheckedUpdateManyInput>
  /**
   * Filter which ExpenseDBS to update
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * Limit how many ExpenseDBS to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExpenseDB upsert
 */
export type ExpenseDBUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * The filter to search for the ExpenseDB to update in case it exists.
   */
  where: Prisma.ExpenseDBWhereUniqueInput
  /**
   * In case the ExpenseDB found by the `where` argument doesn't exist, create a new ExpenseDB with this data.
   */
  create: Prisma.XOR<Prisma.ExpenseDBCreateInput, Prisma.ExpenseDBUncheckedCreateInput>
  /**
   * In case the ExpenseDB was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExpenseDBUpdateInput, Prisma.ExpenseDBUncheckedUpdateInput>
}

/**
 * ExpenseDB delete
 */
export type ExpenseDBDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
  /**
   * Filter which ExpenseDB to delete.
   */
  where: Prisma.ExpenseDBWhereUniqueInput
}

/**
 * ExpenseDB deleteMany
 */
export type ExpenseDBDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExpenseDBS to delete
   */
  where?: Prisma.ExpenseDBWhereInput
  /**
   * Limit how many ExpenseDBS to delete.
   */
  limit?: number
}

/**
 * ExpenseDB without action
 */
export type ExpenseDBDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExpenseDB
   */
  select?: Prisma.ExpenseDBSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExpenseDB
   */
  omit?: Prisma.ExpenseDBOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExpenseDBInclude<ExtArgs> | null
}
